def scene_at(now)
{
  var camera = Cameras.perspective( [ "eye": pos(0,0,4),
                                      "look_at": pos(0,0,0) ] )

  var back_wall_material = Materials.uniform( [ "ambient": Colors.white() * 0.1,
                                                "diffuse": Colors.white() * 0.8 ] )

  var red_sphere_material = Materials.uniform( [ "ambient": Colors.red() * 0.1,
                                             "diffuse": Colors.red() * 0.8,
                                             "specular": Colors.red() * 0.8,
                                             "specular_exponent": 10,
                                             "light_filtering":  Colors.red() * 0.8] )
  var blue_sphere_material = Materials.uniform( [ "ambient": Colors.blue() * 0.1,
                                             "diffuse": Colors.blue() * 0.8,
                                             "specular": Colors.blue() * 0.8,
                                             "specular_exponent": 10,
                                             "light_filtering":  Colors.blue() * 0.8 ] )

  var primitives = []
  primitives.push_back( translate(vec(0,0,-2), decorate(back_wall_material, xy_plane())) )
  primitives.push_back(translate(vec(2,0,0), decorate(blue_sphere_material, sphere())))
  primitives.push_back(translate(vec(-2,0,0), decorate(red_sphere_material, sphere())))
  
  var root = union(primitives)

  var t = Animations.animate(1, 2, seconds(5))[now]
  var lights = [ Lights.omnidirectional( pos(-3 * t,0,5), Colors.white() ), Lights.omnidirectional( pos(3 * t,0,5), Colors.white() ) ]

  create_scene(camera, root, lights)
}

var raytracer   = Raytracers.v5()
var renderer    = Renderers.standard( [ "width": 500,
                                        "height": 500,
                                        "sampler": Samplers.multijittered(2),
                                        "ray_tracer": raytracer ] )

pipeline( scene_animation(scene_at, seconds(5)),
          [ Pipeline.animation(30),
            Pipeline.renderer(renderer),
            Pipeline.studio() ] )