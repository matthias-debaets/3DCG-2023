def material(color)
{
  Materials.uniform( [ "ambient": color * 0.5,
                       "diffuse": color * 0.8 ] )
}

def scene_at(now)
{
  var camera = Cameras.perspective( [ "eye": pos(0, 1, 10),
                                      "look_at": pos(0,0,0) ] )
  
  var left_upper_bouncy_sphere_position = Animations.ease( Animations.animate( pos(0,4,0), pos(0,1,0), seconds(3) ), Easing.bounce(20, 10) )[now]
  var left_lower_bouncy_sphere_position = Animations.ease( Animations.animate( pos(0,-4,0), pos(0,-1,0), seconds(3) ), Easing.bounce(20, 10) )[now]
  
  var upper_left_bouncy_sphere_position = Animations.ease( Animations.animate( pos(-2,0,0), pos(-1,0,0), seconds(3) ), Easing.bounce(5, 2) )[now]
  var upper_right_bouncy_sphere_position = Animations.ease( Animations.animate( pos(2,0,0), pos(1,0,0), seconds(3) ), Easing.bounce(5, 2) )[now]
  
  var middle_sphere_position = Animations.ease( Animations.animate( pos(0,0,3), pos(0,0,-3), seconds(3) ), Easing.elastic(10, 5) )[now]
  
  var lower_right_sphere_position = Animations.ease( Animations.animate( pos(0,-3,0), pos(2,0,0), seconds(3) ), Easing.elastic(10, 2) )[now]

  var left_upper_bouncy_sphere = translate(left_upper_bouncy_sphere_position - pos(0, 0, 0), decorate(material(Colors.red()), sphere()))
  var left_lower_bouncy_sphere = translate(left_lower_bouncy_sphere_position - pos(0, 0, 0), decorate(material(Colors.red()), sphere()))
  var middle_sphere = translate(middle_sphere_position - pos(0, 0, 0), decorate(material(Colors.red()), sphere()))
  
  var upper_left_bouncy_sphere = translate(upper_left_bouncy_sphere_position - pos(0, 0, 0), decorate(material(Colors.red()), sphere()))
  var upper_right_bouncy_sphere = translate(upper_right_bouncy_sphere_position - pos(0, 0, 0), decorate(material(Colors.red()), sphere()))
  
  var lower_right_sphere = translate(lower_right_sphere_position - pos(0, 0, 0), decorate(material(Colors.red()), sphere()))

  var root = union([
    translate(vec(-4, 0, -2), left_upper_bouncy_sphere),
    translate(vec(-4, 0, -2), left_lower_bouncy_sphere),
    translate(vec(0, 0, 0), middle_sphere),
    translate(vec(0, 4, -2), upper_left_bouncy_sphere),
    translate(vec(0, 4, -2), upper_right_bouncy_sphere),
    translate(vec(1, -2, -2), lower_right_sphere)
  ])

  var lights = [ ]


  create_scene(camera, root, lights)
}

var raytracer   = Raytracers.v0()
var renderer    = Renderers.standard( [ "width": 500,
                                        "height": 500,
                                        "sampler": Samplers.single(),
                                        "ray_tracer": raytracer ] )

pipeline( scene_animation(scene_at, seconds(5)),
          [ Pipeline.animation(30),
            Pipeline.renderer(renderer),
            Pipeline.wif(),
            Pipeline.base64(),
            Pipeline.stdout() ] )